<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/schema/meta/action.meta.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/schema/meta/action.meta.json" />
              <option name="originalContent" value="{&#10;  &quot;$schema&quot;: &quot;https://json-schema.org/draft/2020-12/schema&quot;,&#10;  &quot;$id&quot;: &quot;https://mind-schema.org/schema/meta/action.meta.json&quot;,&#10;  &quot;title&quot;: &quot;actionMeta&quot;,&#10;  &quot;description&quot;: &quot;Metadata for a standardized action, referencing action.def.json.&quot;,&#10;  &quot;type&quot;: &quot;object&quot;,&#10;  &quot;properties&quot;: {&#10;    &quot;definition&quot;: { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/def/action.def.json&quot; },&#10;    &quot;context&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;Context or scenario for the action.&quot; },&#10;    &quot;tags&quot;: { &quot;type&quot;: &quot;array&quot;, &quot;items&quot;: { &quot;type&quot;: &quot;string&quot; }, &quot;description&quot;: &quot;Optional tags for classification.&quot; },&#10;    &quot;extensions&quot;: { &quot;type&quot;: &quot;object&quot;, &quot;description&quot;: &quot;Custom extension fields for future compatibility.&quot;, &quot;additionalProperties&quot;: true }&#10;  },&#10;  &quot;required&quot;: [&quot;definition&quot;],&#10;  &quot;additionalProperties&quot;: false&#10;}&#10;&#10;" />
              <option name="updatedContent" value="{&#13;&#10;  &quot;$schema&quot;: &quot;https://json-schema.org/draft/2020-12/schema&quot;,&#13;&#10;  &quot;$id&quot;: &quot;https://mind-schema.org/schema/metas/action.meta.json&quot;,&#13;&#10;  &quot;title&quot;: &quot;actionMeta&quot;,&#13;&#10;  &quot;description&quot;: &quot;Metadata for a standardized action, referencing canonical action type.&quot;,&#13;&#10;  &quot;type&quot;: &quot;object&quot;,&#13;&#10;  &quot;properties&quot;: {&#13;&#10;    &quot;definition&quot;: { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/types/action.json&quot; },&#13;&#10;    &quot;context&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;Context or scenario for the action.&quot; },&#13;&#10;    &quot;tags&quot;: { &quot;type&quot;: &quot;array&quot;, &quot;items&quot;: { &quot;type&quot;: &quot;string&quot; }, &quot;description&quot;: &quot;Optional tags for classification.&quot; },&#13;&#10;    &quot;extensions&quot;: { &quot;type&quot;: &quot;object&quot;, &quot;description&quot;: &quot;Custom extension fields for future compatibility.&quot;, &quot;additionalProperties&quot;: true }&#13;&#10;  },&#13;&#10;  &quot;required&quot;: [&quot;definition&quot;],&#13;&#10;  &quot;additionalProperties&quot;: false&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/schema/meta/bone.meta.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/schema/meta/bone.meta.json" />
              <option name="originalContent" value="{&#10;  &quot;$schema&quot;: &quot;https://json-schema.org/draft/2020-12/schema&quot;,&#10;  &quot;$id&quot;: &quot;https://mind-schema.org/schema/meta/bone.meta.json&quot;,&#10;  &quot;$comment&quot;: &quot;MIND harmonised 2025-10 — generalised bone definition supporting region-specific enums and aliases.&quot;,&#10;  &quot;title&quot;: &quot;boneMeta&quot;,&#10;  &quot;description&quot;: &quot;Definition of a single bone connecting two joints within a skeleton. Supports both hand and body regions with region-dependent properties.&quot;,&#10;  &quot;type&quot;: &quot;object&quot;,&#10;&#10;  &quot;properties&quot;: {&#10;    &quot;name&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;description&quot;: &quot;Canonical name of the bone within its region (e.g., 'indexProximal', 'leftFemur').&quot;&#10;    },&#10;    &quot;region&quot;: {&#10;      &quot;$ref&quot;: &quot;https://mind-schema.org/schema/enums/body.region.enum.json&quot;&#10;    },&#10;    &quot;side&quot;: {&#10;      &quot;$ref&quot;: &quot;https://mind-schema.org/schema/enums/body.side.enum.json&quot;,&#10;      &quot;description&quot;: &quot;Anatomical side associated with this bone: 'left', 'right', or 'centre'.&quot;&#10;    },&#10;    &quot;fromJoint&quot;: {&#10;      &quot;$ref&quot;: &quot;https://mind-schema.org/schema/meta/joint.meta.json&quot;,&#10;      &quot;description&quot;: &quot;Reference to the proximal (parent) joint metadata object.&quot;&#10;    },&#10;    &quot;toJoint&quot;: {&#10;      &quot;$ref&quot;: &quot;https://mind-schema.org/schema/meta/joint.meta.json&quot;,&#10;      &quot;description&quot;: &quot;Reference to the distal (child) joint metadata object.&quot;&#10;    },&#10;    &quot;direction&quot;: {&#10;      &quot;$ref&quot;: &quot;https://mind-schema.org/schema/def/vector3.def.json&quot;,&#10;      &quot;description&quot;: &quot;Unit vector defining the bone’s direction in rest configuration.&quot;&#10;    },&#10;    &quot;length&quot;: {&#10;      &quot;type&quot;: &quot;number&quot;,&#10;      &quot;minimum&quot;: 0,&#10;      &quot;description&quot;: &quot;Bone length in metres, measured between 'fromJoint' and 'toJoint' in rest configuration.&quot;&#10;    },&#10;    &quot;orientation&quot;: {&#10;      &quot;$ref&quot;: &quot;https://mind-schema.org/schema/def/quaternion.def.json&quot;,&#10;      &quot;description&quot;: &quot;Optional rest orientation of the bone segment, as a unit quaternion.&quot;&#10;    },&#10;    &quot;extensions&quot;: {&#10;      &quot;type&quot;: &quot;object&quot;,&#10;      &quot;description&quot;: &quot;Custom extension fields for future compatibility.&quot;,&#10;      &quot;additionalProperties&quot;: true&#10;    }&#10;  },&#10;&#10;  &quot;allOf&quot;: [&#10;    {&#10;      &quot;if&quot;: { &quot;properties&quot;: { &quot;region&quot;: { &quot;const&quot;: &quot;hand&quot; } } },&#10;      &quot;then&quot;: {&#10;        &quot;properties&quot;: {&#10;          &quot;aliases&quot;: { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/type/alias/hand.mapping.json&quot; },&#10;          &quot;finger&quot;: { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/enums/hand.finger.enum.json&quot; },&#10;          &quot;bone&quot;: { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/enums/hand.bone.enum.json&quot; }&#10;        },&#10;        &quot;required&quot;: [&quot;finger&quot;, &quot;bone&quot;]&#10;      }&#10;    },&#10;    {&#10;      &quot;if&quot;: {&#10;        &quot;properties&quot;: {&#10;          &quot;region&quot;: { &quot;enum&quot;: [&quot;arm&quot;, &quot;leg&quot;, &quot;spine&quot;, &quot;torso&quot;, &quot;body&quot;, &quot;head&quot;] }&#10;        }&#10;      },&#10;      &quot;then&quot;: {&#10;        &quot;properties&quot;: {&#10;          &quot;aliases&quot;: { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/type/alias/body.mapping.json&quot; },&#10;          &quot;bone&quot;: { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/enums/body.bone.enum.json&quot; }&#10;        },&#10;        &quot;required&quot;: [&quot;bone&quot;]&#10;      }&#10;    }&#10;  ],&#10;&#10;  &quot;required&quot;: [&quot;name&quot;, &quot;region&quot;, &quot;fromJoint&quot;, &quot;toJoint&quot;, &quot;restPose&quot;],&#10;  &quot;additionalProperties&quot;: false&#10;}&#10;" />
              <option name="updatedContent" value="{&#13;&#10;  &quot;$schema&quot;: &quot;https://json-schema.org/draft/2020-12/schema&quot;,&#13;&#10;  &quot;$id&quot;: &quot;https://mind-schema.org/schema/metas/bone.meta.json&quot;,&#13;&#10;  &quot;$comment&quot;: &quot;MIND harmonised 2025-10 — generalised bone definition supporting region-specific enums and aliases.&quot;,&#13;&#10;  &quot;title&quot;: &quot;boneMeta&quot;,&#13;&#10;  &quot;description&quot;: &quot;Definition of a single bone connecting two joints within a skeleton. Supports both hand and body regions with region-dependent properties.&quot;,&#13;&#10;  &quot;type&quot;: &quot;object&quot;,&#13;&#10;  &quot;properties&quot;: {&#13;&#10;    &quot;name&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;Canonical name of the bone within its region (e.g., 'indexProximal', 'leftFemur').&quot; },&#13;&#10;    &quot;region&quot;: { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/enums/body.region.enum.json&quot; },&#13;&#10;    &quot;side&quot;: { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/enums/body.side.enum.json&quot;, &quot;description&quot;: &quot;Anatomical side associated with this bone: 'left', 'right', or 'centre'.&quot; },&#13;&#10;    &quot;fromJoint&quot;: { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/metas/joint.meta.json&quot;, &quot;description&quot;: &quot;Reference to the proximal (parent) joint metadata object.&quot; },&#13;&#10;    &quot;toJoint&quot;: { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/metas/joint.meta.json&quot;, &quot;description&quot;: &quot;Reference to the distal (child) joint metadata object.&quot; },&#13;&#10;    &quot;direction&quot;: { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/primitives/vector3.json&quot;, &quot;description&quot;: &quot;Unit vector defining the bone’s direction in rest configuration.&quot; },&#13;&#10;    &quot;length&quot;: { &quot;type&quot;: &quot;number&quot;, &quot;minimum&quot;: 0, &quot;description&quot;: &quot;Bone length in metres, measured between 'fromJoint' and 'toJoint' in rest configuration.&quot; },&#13;&#10;    &quot;orientation&quot;: { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/primitives/quaternion.json&quot;, &quot;description&quot;: &quot;Optional rest orientation of the bone segment, as a unit quaternion.&quot; },&#13;&#10;    &quot;extensions&quot;: { &quot;type&quot;: &quot;object&quot;, &quot;description&quot;: &quot;Custom extension fields for future compatibility.&quot;, &quot;additionalProperties&quot;: true }&#13;&#10;  },&#13;&#10;  &quot;allOf&quot;: [&#13;&#10;    { &quot;if&quot;: { &quot;properties&quot;: { &quot;region&quot;: { &quot;const&quot;: &quot;hand&quot; } } },&#13;&#10;      &quot;then&quot;: { &quot;properties&quot;: { &quot;aliases&quot;: { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/maps/hand.mapping.json&quot; }, &quot;finger&quot;: { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/enums/hand.finger.enum.json&quot; }, &quot;bone&quot;: { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/enums/hand.bone.enum.json&quot; } }, &quot;required&quot;: [&quot;bone&quot;] } },&#13;&#10;    { &quot;if&quot;: { &quot;properties&quot;: { &quot;region&quot;: { &quot;enum&quot;: [&quot;arm&quot;, &quot;leg&quot;, &quot;spine&quot;, &quot;torso&quot;, &quot;body&quot;, &quot;head&quot;] } } },&#13;&#10;      &quot;then&quot;: { &quot;properties&quot;: { &quot;aliases&quot;: { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/maps/body.mapping.json&quot; }, &quot;bone&quot;: { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/enums/body.bone.enum.json&quot; } }, &quot;required&quot;: [&quot;bone&quot;] } }&#13;&#10;  ],&#13;&#10;  &quot;required&quot;: [&quot;name&quot;, &quot;region&quot;, &quot;fromJoint&quot;, &quot;toJoint&quot;, &quot;length&quot;],&#13;&#10;  &quot;additionalProperties&quot;: false&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/schema/meta/device.meta.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/schema/meta/device.meta.json" />
              <option name="originalContent" value="{&#10;  &quot;$schema&quot;: &quot;https://json-schema.org/draft/2020-12/schema&quot;,&#10;  &quot;$id&quot;: &quot;https://mind-schema.org/schema/meta/device.meta.json&quot;,&#10;  &quot;title&quot;: &quot;deviceMeta&quot;,&#10;  &quot;description&quot;: &quot;Metadata for a standardized device, referencing canonical device type.&quot;,&#10;  &quot;type&quot;: &quot;object&quot;,&#10;  &quot;properties&quot;: {&#10;    &quot;definition&quot;: { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/types/device.json&quot; },&#10;    &quot;context&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;Context or scenario for the device.&quot; },&#10;    &quot;tags&quot;: { &quot;type&quot;: &quot;array&quot;, &quot;items&quot;: { &quot;type&quot;: &quot;string&quot; }, &quot;description&quot;: &quot;Optional tags for classification.&quot; },&#10;    &quot;extensions&quot;: { &quot;type&quot;: &quot;object&quot;, &quot;description&quot;: &quot;Custom extension fields for future compatibility.&quot;, &quot;additionalProperties&quot;: true }&#10;  },&#10;  &quot;required&quot;: [&quot;definition&quot;],&#10;  &quot;additionalProperties&quot;: false&#10;}&#10;" />
              <option name="updatedContent" value="{&#13;&#10;  &quot;$schema&quot;: &quot;https://json-schema.org/draft/2020-12/schema&quot;,&#13;&#10;  &quot;$id&quot;: &quot;https://mind-schema.org/schema/metas/device.meta.json&quot;,&#13;&#10;  &quot;title&quot;: &quot;deviceMeta&quot;,&#13;&#10;  &quot;description&quot;: &quot;Metadata for a standardized device, referencing canonical device type.&quot;,&#13;&#10;  &quot;type&quot;: &quot;object&quot;,&#13;&#10;  &quot;properties&quot;: {&#13;&#10;    &quot;definition&quot;: { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/types/device.json&quot; },&#13;&#10;    &quot;context&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;Context or scenario for the device.&quot; },&#13;&#10;    &quot;tags&quot;: { &quot;type&quot;: &quot;array&quot;, &quot;items&quot;: { &quot;type&quot;: &quot;string&quot; }, &quot;description&quot;: &quot;Optional tags for classification.&quot; },&#13;&#10;    &quot;extensions&quot;: { &quot;type&quot;: &quot;object&quot;, &quot;description&quot;: &quot;Custom extension fields for future compatibility.&quot;, &quot;additionalProperties&quot;: true }&#13;&#10;  },&#13;&#10;  &quot;required&quot;: [&quot;definition&quot;],&#13;&#10;  &quot;additionalProperties&quot;: false&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/schema/meta/event.meta.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/schema/meta/event.meta.json" />
              <option name="updatedContent" value="{&#10;  &quot;$schema&quot;: &quot;https://json-schema.org/draft/2020-12/schema&quot;,&#10;  &quot;$id&quot;: &quot;https://mind-schema.org/schema/metas/event.meta.json&quot;,&#10;  &quot;title&quot;: &quot;eventMeta&quot;,&#10;  &quot;description&quot;: &quot;Metadata for a standardized event, referencing canonical event type.&quot;,&#10;  &quot;type&quot;: &quot;object&quot;,&#10;  &quot;properties&quot;: {&#10;    &quot;definition&quot;: { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/types/event.json&quot; },&#10;    &quot;context&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;Context or scenario for the event.&quot; },&#10;    &quot;tags&quot;: { &quot;type&quot;: &quot;array&quot;, &quot;items&quot;: { &quot;type&quot;: &quot;string&quot; }, &quot;description&quot;: &quot;Optional tags for classification.&quot; },&#10;    &quot;extensions&quot;: { &quot;type&quot;: &quot;object&quot;, &quot;description&quot;: &quot;Custom extension fields for future compatibility.&quot;, &quot;additionalProperties&quot;: true }&#10;  },&#10;  &quot;required&quot;: [&quot;definition&quot;],&#10;  &quot;additionalProperties&quot;: false&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/schema/meta/hand.meta.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/schema/meta/hand.meta.json" />
              <option name="originalContent" value="{&#10;  &quot;$schema&quot;: &quot;https://json-schema.org/draft/2020-12/schema&quot;,&#10;  &quot;$id&quot;: &quot;https://mind-schema.org/schema/meta/hand.meta.json&quot;,&#10;  &quot;$comment&quot;: &quot;MIND harmonised 2025-10 — static metadata describing a tracked hand, including provenance, structure, and coordinate conventions.&quot;,&#10;  &quot;title&quot;: &quot;handMeta&quot;,&#10;  &quot;description&quot;: &quot;Static metadata describing a tracked hand, including device and tracking system provenance, joint and bone hierarchy, and coordinate conventions. Enables interoperability across hand-tracking SDKs and hardware platforms.&quot;,&#10;&#10;  &quot;type&quot;: &quot;object&quot;,&#10;  &quot;properties&quot;: {&#10;    &quot;region&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;const&quot;: &quot;hand&quot;,&#10;      &quot;description&quot;: &quot;Fixed region identifier for this metadata type.&quot;&#10;    },&#10;    &quot;side&quot;: {&#10;      &quot;$ref&quot;: &quot;https://mind-schema.org/schema/enums/body.side.enum.json&quot;,&#10;      &quot;description&quot;: &quot;Anatomical side of the hand being tracked.&quot;&#10;    },&#10;&#10;    &quot;trackingSystem&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;description&quot;: &quot;Name of the hand-tracking software framework or SDK (e.g., 'OpenXR', 'Ultraleap', 'ARKit', 'Manus Core', 'Custom').&quot;&#10;    },&#10;    &quot;trackingProfile&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;description&quot;: &quot;Specific joint definition or system profile used by the tracking system (e.g., 'XR_EXT_hand_tracking', 'UnityXRHands').&quot;&#10;    },&#10;    &quot;trackingVersion&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;description&quot;: &quot;Version or API level of the tracking system.&quot;&#10;    },&#10;&#10;    &quot;deviceVendor&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;description&quot;: &quot;Manufacturer or vendor of the hand-tracking hardware (e.g., 'Meta', 'Varjo', 'Ultraleap', 'Apple').&quot;&#10;    },&#10;    &quot;deviceModel&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;description&quot;: &quot;Specific model name or identifier for the device used to capture hand-tracking data.&quot;&#10;    },&#10;    &quot;sourceURI&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;description&quot;: &quot;Optional URI or identifier linking to detailed device calibration or configuration information.&quot;&#10;    },&#10;&#10;    &quot;skeleton&quot;: {&#10;      &quot;$ref&quot;: &quot;https://mind-schema.org/schema/meta/skeleton.meta.json&quot;,&#10;      &quot;description&quot;: &quot;Optional reference to a detailed skeleton metadata object defining this hand’s joint and bone topology.&quot;&#10;    },&#10;&#10;    &quot;joints&quot;: {&#10;      &quot;type&quot;: &quot;array&quot;,&#10;      &quot;description&quot;: &quot;List of all joint metadata objects for this hand, following the chosen tracking standard (e.g., OpenXR, UnityXRHands).&quot;,&#10;      &quot;items&quot;: {&#10;        &quot;oneOf&quot;: [&#10;          { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/meta/joint.meta.json&quot; },&#10;          { &quot;type&quot;: &quot;string&quot; }&#10;        ]&#10;      },&#10;      &quot;uniqueItems&quot;: true&#10;    },&#10;&#10;    &quot;bones&quot;: {&#10;      &quot;type&quot;: &quot;array&quot;,&#10;      &quot;description&quot;: &quot;List of all bone metadata objects connecting hand joints.&quot;,&#10;      &quot;items&quot;: {&#10;        &quot;oneOf&quot;: [&#10;          { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/meta/bone.meta.json&quot; },&#10;          { &quot;type&quot;: &quot;string&quot; }&#10;        ]&#10;      },&#10;      &quot;uniqueItems&quot;: true&#10;    },&#10;&#10;    &quot;jointCount&quot;: {&#10;      &quot;type&quot;: &quot;integer&quot;,&#10;      &quot;minimum&quot;: 1,&#10;      &quot;maximum&quot;: 26,&#10;      &quot;description&quot;: &quot;Number of joints defined in this hand skeleton (e.g., 26 for a full OpenXR hand).&quot;&#10;    },&#10;&#10;    &quot;coordinateSystem&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;enum&quot;: [&quot;rightHanded&quot;, &quot;leftHanded&quot;],&#10;      &quot;description&quot;: &quot;Coordinate system convention for spatial data.&quot;&#10;    },&#10;    &quot;unit&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;enum&quot;: [&quot;metres&quot;],&#10;      &quot;description&quot;: &quot;Measurement unit for positional data. Always metres in the MIND standard.&quot;&#10;    },&#10;&#10;    &quot;tags&quot;: {&#10;      &quot;type&quot;: &quot;array&quot;,&#10;      &quot;items&quot;: { &quot;type&quot;: &quot;string&quot; },&#10;      &quot;description&quot;: &quot;Optional freeform labels (e.g., 'XRHand', 'gestureTracking', 'riggedMeshCompatible').&quot;&#10;    },&#10;&#10;    &quot;metadata&quot;: {&#10;      &quot;type&quot;: &quot;object&quot;,&#10;      &quot;description&quot;: &quot;Optional extended metadata such as calibration parameters, offsets, or confidence scores.&quot;,&#10;      &quot;additionalProperties&quot;: true&#10;    },&#10;&#10;    &quot;extensions&quot;: {&#10;      &quot;type&quot;: &quot;object&quot;,&#10;      &quot;description&quot;: &quot;Custom extension fields for future compatibility.&quot;,&#10;      &quot;additionalProperties&quot;: true&#10;    }&#10;  },&#10;&#10;  &quot;required&quot;: [&#10;    &quot;region&quot;,&#10;    &quot;side&quot;,&#10;    &quot;trackingSystem&quot;,&#10;    &quot;joints&quot;,&#10;    &quot;coordinateSystem&quot;,&#10;    &quot;unit&quot;&#10;  ],&#10;  &quot;additionalProperties&quot;: false&#10;}&#10;" />
              <option name="updatedContent" value="{&#13;&#10;  &quot;$schema&quot;: &quot;https://json-schema.org/draft/2020-12/schema&quot;,&#13;&#10;  &quot;$id&quot;: &quot;https://mind-schema.org/schema/metas/hand.meta.json&quot;,&#13;&#10;  &quot;$comment&quot;: &quot;MIND harmonised 2025-10 — static metadata describing a tracked hand, including provenance, structure, and coordinate conventions.&quot;,&#13;&#10;  &quot;title&quot;: &quot;handMeta&quot;,&#13;&#10;  &quot;description&quot;: &quot;Static metadata describing a tracked hand, including device and tracking system provenance, joint and bone hierarchy, and coordinate conventions. Enables interoperability across hand-tracking SDKs and hardware platforms.&quot;,&#13;&#10;&#13;&#10;  &quot;type&quot;: &quot;object&quot;,&#13;&#10;  &quot;properties&quot;: {&#13;&#10;    &quot;region&quot;: {&#13;&#10;      &quot;type&quot;: &quot;string&quot;,&#13;&#10;      &quot;const&quot;: &quot;hand&quot;,&#13;&#10;      &quot;description&quot;: &quot;Fixed region identifier for this metadata type.&quot;&#13;&#10;    },&#13;&#10;    &quot;side&quot;: {&#13;&#10;      &quot;$ref&quot;: &quot;https://mind-schema.org/schema/enums/body.side.enum.json&quot;,&#13;&#10;      &quot;description&quot;: &quot;Anatomical side of the hand being tracked.&quot;&#13;&#10;    },&#13;&#10;&#13;&#10;    &quot;trackingSystem&quot;: {&#13;&#10;      &quot;type&quot;: &quot;string&quot;,&#13;&#10;      &quot;description&quot;: &quot;Name of the hand-tracking software framework or SDK (e.g., 'OpenXR', 'Ultraleap', 'ARKit', 'Manus Core', 'Custom').&quot;&#13;&#10;    },&#13;&#10;    &quot;trackingProfile&quot;: {&#13;&#10;      &quot;type&quot;: &quot;string&quot;,&#13;&#10;      &quot;description&quot;: &quot;Specific joint definition or system profile used by the tracking system (e.g., 'XR_EXT_hand_tracking', 'UnityXRHands').&quot;&#13;&#10;    },&#13;&#10;    &quot;trackingVersion&quot;: {&#13;&#10;      &quot;type&quot;: &quot;string&quot;,&#13;&#10;      &quot;description&quot;: &quot;Version or API level of the tracking system.&quot;&#13;&#10;    },&#13;&#10;&#13;&#10;    &quot;deviceVendor&quot;: {&#13;&#10;      &quot;type&quot;: &quot;string&quot;,&#13;&#10;      &quot;description&quot;: &quot;Manufacturer or vendor of the hand-tracking hardware (e.g., 'Meta', 'Varjo', 'Ultraleap', 'Apple').&quot;&#13;&#10;    },&#13;&#10;    &quot;deviceModel&quot;: {&#13;&#10;      &quot;type&quot;: &quot;string&quot;,&#13;&#10;      &quot;description&quot;: &quot;Specific model name or identifier for the device used to capture hand-tracking data.&quot;&#13;&#10;    },&#13;&#10;    &quot;sourceURI&quot;: {&#13;&#10;      &quot;type&quot;: &quot;string&quot;,&#13;&#10;      &quot;description&quot;: &quot;Optional URI or identifier linking to detailed device calibration or configuration information.&quot;&#13;&#10;    },&#13;&#10;&#13;&#10;    &quot;skeleton&quot;: {&#13;&#10;      &quot;$ref&quot;: &quot;https://mind-schema.org/schema/metas/skeleton.meta.json&quot;,&#13;&#10;      &quot;description&quot;: &quot;Optional reference to a detailed skeleton metadata object defining this hand’s joint and bone topology.&quot;&#13;&#10;    },&#13;&#10;&#13;&#10;    &quot;joints&quot;: {&#13;&#10;      &quot;type&quot;: &quot;array&quot;,&#13;&#10;      &quot;description&quot;: &quot;List of all joint metadata objects for this hand, following the chosen tracking standard (e.g., OpenXR, UnityXRHands).&quot;,&#13;&#10;      &quot;items&quot;: {&#13;&#10;        &quot;oneOf&quot;: [&#13;&#10;          { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/metas/joint.meta.json&quot; },&#13;&#10;          { &quot;type&quot;: &quot;string&quot; }&#13;&#10;        ]&#13;&#10;      },&#13;&#10;      &quot;uniqueItems&quot;: true&#13;&#10;    },&#13;&#10;&#13;&#10;    &quot;bones&quot;: {&#13;&#10;      &quot;type&quot;: &quot;array&quot;,&#13;&#10;      &quot;description&quot;: &quot;List of all bone metadata objects connecting hand joints.&quot;,&#13;&#10;      &quot;items&quot;: {&#13;&#10;        &quot;oneOf&quot;: [&#13;&#10;          { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/metas/bone.meta.json&quot; },&#13;&#10;          { &quot;type&quot;: &quot;string&quot; }&#13;&#10;        ]&#13;&#10;      },&#13;&#10;      &quot;uniqueItems&quot;: true&#13;&#10;    },&#13;&#10;&#13;&#10;    &quot;jointCount&quot;: {&#13;&#10;      &quot;type&quot;: &quot;integer&quot;,&#13;&#10;      &quot;minimum&quot;: 1,&#13;&#10;      &quot;maximum&quot;: 26,&#13;&#10;      &quot;description&quot;: &quot;Number of joints defined in this hand skeleton (e.g., 26 for a full OpenXR hand).&quot;&#13;&#10;    },&#13;&#10;&#13;&#10;    &quot;coordinateSystem&quot;: {&#13;&#10;      &quot;type&quot;: &quot;string&quot;,&#13;&#10;      &quot;enum&quot;: [&quot;rightHanded&quot;, &quot;leftHanded&quot;],&#13;&#10;      &quot;description&quot;: &quot;Coordinate system convention for spatial data.&quot;&#13;&#10;    },&#13;&#10;    &quot;unit&quot;: {&#13;&#10;      &quot;type&quot;: &quot;string&quot;,&#13;&#10;      &quot;enum&quot;: [&quot;metres&quot;],&#13;&#10;      &quot;description&quot;: &quot;Measurement unit for positional data. Always metres in the MIND standard.&quot;&#13;&#10;    },&#13;&#10;&#13;&#10;    &quot;tags&quot;: {&#13;&#10;      &quot;type&quot;: &quot;array&quot;,&#13;&#10;      &quot;items&quot;: { &quot;type&quot;: &quot;string&quot; },&#13;&#10;      &quot;description&quot;: &quot;Optional freeform labels (e.g., 'XRHand', 'gestureTracking', 'riggedMeshCompatible').&quot;&#13;&#10;    },&#13;&#10;&#13;&#10;    &quot;metadata&quot;: {&#13;&#10;      &quot;type&quot;: &quot;object&quot;,&#13;&#10;      &quot;description&quot;: &quot;Optional extended metadata such as calibration parameters, offsets, or confidence scores.&quot;,&#13;&#10;      &quot;additionalProperties&quot;: true&#13;&#10;    },&#13;&#10;&#13;&#10;    &quot;extensions&quot;: {&#13;&#10;      &quot;type&quot;: &quot;object&quot;,&#13;&#10;      &quot;description&quot;: &quot;Custom extension fields for future compatibility.&quot;,&#13;&#10;      &quot;additionalProperties&quot;: true&#13;&#10;    }&#13;&#10;  },&#13;&#10;&#13;&#10;  &quot;required&quot;: [&#13;&#10;    &quot;region&quot;,&#13;&#10;    &quot;side&quot;,&#13;&#10;    &quot;trackingSystem&quot;,&#13;&#10;    &quot;joints&quot;,&#13;&#10;    &quot;coordinateSystem&quot;,&#13;&#10;    &quot;unit&quot;&#13;&#10;  ],&#13;&#10;  &quot;additionalProperties&quot;: false&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/schema/meta/interactive.meta.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/schema/meta/interactive.meta.json" />
              <option name="originalContent" value="{&#10;  &quot;$schema&quot;: &quot;https://json-schema.org/draft/2020-12/schema&quot;,&#10;  &quot;$id&quot;: &quot;https://mind-schema.org/schema/meta/interactive.meta.json&quot;,&#10;  &quot;$comment&quot;: &quot;MIND harmonised 2025-10 — static metadata for interactive tracked objects&quot;,&#10;  &quot;title&quot;: &quot;interactive&quot;,&#10;  &quot;description&quot;: &quot;Static metadata for interactive tracked objects defining their physical and interaction properties in a simulation or XR environment.&quot;,&#10;  &quot;type&quot;: &quot;object&quot;,&#10;  &quot;properties&quot;: {&#10;    &quot;isKinematic&quot;: {&#10;      &quot;type&quot;: &quot;boolean&quot;,&#10;      &quot;description&quot;: &quot;True if the object is kinematic (moved explicitly, not affected by forces).&quot;&#10;    },&#10;    &quot;isStatic&quot;: {&#10;      &quot;type&quot;: &quot;boolean&quot;,&#10;      &quot;description&quot;: &quot;True if the object is static and does not move or respond to physics.&quot;&#10;    },&#10;    &quot;mass&quot;: {&#10;      &quot;type&quot;: &quot;number&quot;,&#10;      &quot;minimum&quot;: 0,&#10;      &quot;description&quot;: &quot;Mass of the object in kilograms.&quot;&#10;    },&#10;    &quot;drag&quot;: {&#10;      &quot;type&quot;: &quot;number&quot;,&#10;      &quot;minimum&quot;: 0,&#10;      &quot;description&quot;: &quot;Linear drag (air resistance).&quot;&#10;    },&#10;    &quot;angularDrag&quot;: {&#10;      &quot;type&quot;: &quot;number&quot;,&#10;      &quot;minimum&quot;: 0,&#10;      &quot;description&quot;: &quot;Resistance to angular motion.&quot;&#10;    },&#10;    &quot;useGravity&quot;: {&#10;      &quot;type&quot;: &quot;boolean&quot;,&#10;      &quot;description&quot;: &quot;Whether gravity is applied to the object.&quot;&#10;    },&#10;    &quot;collisionDetectionMode&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;enum&quot;: [&quot;discrete&quot;, &quot;continuous&quot;, &quot;continuousDynamic&quot;, &quot;continuousSpeculative&quot;],&#10;      &quot;description&quot;: &quot;Collision detection method used by the physics engine.&quot;&#10;    },&#10;    &quot;renderLayer&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;description&quot;: &quot;Logical rendering layer or group (e.g. 'foreground', 'occluder', 'UI').&quot;&#10;    },&#10;    &quot;interactable&quot;: {&#10;      &quot;type&quot;: &quot;object&quot;,&#10;      &quot;description&quot;: &quot;Interaction behaviour and settings for this object.&quot;,&#10;      &quot;properties&quot;: {&#10;        &quot;enabled&quot;: { &quot;type&quot;: &quot;boolean&quot; },&#10;        &quot;interactionLayer&quot;: { &quot;type&quot;: &quot;string&quot; },&#10;        &quot;grabbable&quot;: { &quot;type&quot;: &quot;boolean&quot; },&#10;        &quot;hoverHighlight&quot;: { &quot;type&quot;: &quot;boolean&quot; },&#10;        &quot;selectable&quot;: { &quot;type&quot;: &quot;boolean&quot; },&#10;        &quot;socketable&quot;: { &quot;type&quot;: &quot;boolean&quot; }&#10;      },&#10;      &quot;required&quot;: [&quot;enabled&quot;],&#10;      &quot;additionalProperties&quot;: false&#10;    },&#10;    &quot;tags&quot;: {&#10;      &quot;type&quot;: &quot;array&quot;,&#10;      &quot;items&quot;: { &quot;type&quot;: &quot;string&quot; },&#10;      &quot;description&quot;: &quot;Optional classification tags (e.g. 'grabbable', 'target', 'highlighted').&quot;&#10;    },&#10;    &quot;extensions&quot;: {&#10;      &quot;type&quot;: &quot;object&quot;,&#10;      &quot;description&quot;: &quot;Custom extension fields for future compatibility.&quot;,&#10;      &quot;additionalProperties&quot;: true&#10;    }&#10;  },&#10;  &quot;required&quot;: [&quot;interactable&quot;],&#10;  &quot;additionalProperties&quot;: false&#10;}&#10;" />
              <option name="updatedContent" value="{&#13;&#10;  &quot;$schema&quot;: &quot;https://json-schema.org/draft/2020-12/schema&quot;,&#13;&#10;  &quot;$id&quot;: &quot;https://mind-schema.org/schema/metas/interactive.meta.json&quot;,&#13;&#10;  &quot;$comment&quot;: &quot;MIND harmonised 2025-10 — static metadata for interactive tracked objects&quot;,&#13;&#10;  &quot;title&quot;: &quot;interactive&quot;,&#13;&#10;  &quot;description&quot;: &quot;Static metadata for interactive tracked objects defining their physical and interaction properties in a simulation or XR environment.&quot;,&#13;&#10;  &quot;type&quot;: &quot;object&quot;,&#13;&#10;  &quot;properties&quot;: {&#13;&#10;    &quot;isKinematic&quot;: {&#13;&#10;      &quot;type&quot;: &quot;boolean&quot;,&#13;&#10;      &quot;description&quot;: &quot;True if the object is kinematic (moved explicitly, not affected by forces).&quot;&#13;&#10;    },&#13;&#10;    &quot;isStatic&quot;: {&#13;&#10;      &quot;type&quot;: &quot;boolean&quot;,&#13;&#10;      &quot;description&quot;: &quot;True if the object is static and does not move or respond to physics.&quot;&#13;&#10;    },&#13;&#10;    &quot;mass&quot;: {&#13;&#10;      &quot;type&quot;: &quot;number&quot;,&#13;&#10;      &quot;minimum&quot;: 0,&#13;&#10;      &quot;description&quot;: &quot;Mass of the object in kilograms.&quot;&#13;&#10;    },&#13;&#10;    &quot;drag&quot;: {&#13;&#10;      &quot;type&quot;: &quot;number&quot;,&#13;&#10;      &quot;minimum&quot;: 0,&#13;&#10;      &quot;description&quot;: &quot;Linear drag (air resistance).&quot;&#13;&#10;    },&#13;&#10;    &quot;angularDrag&quot;: {&#13;&#10;      &quot;type&quot;: &quot;number&quot;,&#13;&#10;      &quot;minimum&quot;: 0,&#13;&#10;      &quot;description&quot;: &quot;Resistance to angular motion.&quot;&#13;&#10;    },&#13;&#10;    &quot;useGravity&quot;: {&#13;&#10;      &quot;type&quot;: &quot;boolean&quot;,&#13;&#10;      &quot;description&quot;: &quot;Whether gravity is applied to the object.&quot;&#13;&#10;    },&#13;&#10;    &quot;collisionDetectionMode&quot;: {&#13;&#10;      &quot;type&quot;: &quot;string&quot;,&#13;&#10;      &quot;enum&quot;: [&quot;discrete&quot;, &quot;continuous&quot;, &quot;continuousDynamic&quot;, &quot;continuousSpeculative&quot;],&#13;&#10;      &quot;description&quot;: &quot;Collision detection method used by the physics engine.&quot;&#13;&#10;    },&#13;&#10;    &quot;renderLayer&quot;: {&#13;&#10;      &quot;type&quot;: &quot;string&quot;,&#13;&#10;      &quot;description&quot;: &quot;Logical rendering layer or group (e.g. 'foreground', 'occluder', 'UI').&quot;&#13;&#10;    },&#13;&#10;    &quot;interactable&quot;: {&#13;&#10;      &quot;type&quot;: &quot;object&quot;,&#13;&#10;      &quot;description&quot;: &quot;Interaction behaviour and settings for this object.&quot;,&#13;&#10;      &quot;properties&quot;: {&#13;&#10;        &quot;enabled&quot;: { &quot;type&quot;: &quot;boolean&quot; },&#13;&#10;        &quot;interactionLayer&quot;: { &quot;type&quot;: &quot;string&quot; },&#13;&#10;        &quot;grabbable&quot;: { &quot;type&quot;: &quot;boolean&quot; },&#13;&#10;        &quot;hoverHighlight&quot;: { &quot;type&quot;: &quot;boolean&quot; },&#13;&#10;        &quot;selectable&quot;: { &quot;type&quot;: &quot;boolean&quot; },&#13;&#10;        &quot;socketable&quot;: { &quot;type&quot;: &quot;boolean&quot; }&#13;&#10;      },&#13;&#10;      &quot;required&quot;: [&quot;enabled&quot;],&#13;&#10;      &quot;additionalProperties&quot;: false&#13;&#10;    },&#13;&#10;    &quot;tags&quot;: {&#13;&#10;      &quot;type&quot;: &quot;array&quot;,&#13;&#10;      &quot;items&quot;: { &quot;type&quot;: &quot;string&quot; },&#13;&#10;      &quot;description&quot;: &quot;Optional classification tags (e.g. 'grabbable', 'target', 'highlighted').&quot;&#13;&#10;    },&#13;&#10;    &quot;extensions&quot;: {&#13;&#10;      &quot;type&quot;: &quot;object&quot;,&#13;&#10;      &quot;description&quot;: &quot;Custom extension fields for future compatibility.&quot;,&#13;&#10;      &quot;additionalProperties&quot;: true&#13;&#10;    }&#13;&#10;  },&#13;&#10;  &quot;required&quot;: [&quot;interactable&quot;],&#13;&#10;  &quot;additionalProperties&quot;: false&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/schema/meta/skeleton.meta.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/schema/meta/skeleton.meta.json" />
              <option name="originalContent" value="{&#10;  &quot;$schema&quot;: &quot;https://json-schema.org/draft/2020-12/schema&quot;,&#10;  &quot;$id&quot;: &quot;https://mind-schema.org/schema/meta/skeleton.meta.json&quot;,&#10;  &quot;$comment&quot;: &quot;MIND harmonised 2025-10 — static metadata describing the structure and topology of a skeleton.&quot;,&#10;  &quot;title&quot;: &quot;skeletonMeta&quot;,&#10;  &quot;description&quot;: &quot;Static metadata describing the anatomical or virtual skeleton of a tracked body or model, including all bones, joints, and their hierarchical relationships.&quot;,&#10;&#10;  &quot;type&quot;: &quot;object&quot;,&#10;  &quot;properties&quot;: {&#10;    &quot;name&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;description&quot;: &quot;Canonical name or identifier of the skeleton (e.g., 'HumanBody', 'LeftHand', 'XRHand').&quot;&#10;    },&#10;    &quot;region&quot;: {&#10;      &quot;$ref&quot;: &quot;https://mind-schema.org/schema/enums/body.region.enum.json&quot;,&#10;      &quot;description&quot;: &quot;Overall anatomical region represented by this skeleton (e.g., 'hand', 'body').&quot;&#10;    },&#10;    &quot;side&quot;: {&#10;      &quot;$ref&quot;: &quot;https://mind-schema.org/schema/enums/body.side.enum.json&quot;,&#10;      &quot;description&quot;: &quot;Optional anatomical side represented by this skeleton: 'left', 'right', or 'centre'.&quot;&#10;    },&#10;    &quot;rootJoint&quot;: {&#10;      &quot;$ref&quot;: &quot;https://mind-schema.org/schema/meta/joint.meta.json&quot;,&#10;      &quot;description&quot;: &quot;The root joint of the skeleton hierarchy.&quot;&#10;    },&#10;    &quot;joints&quot;: {&#10;      &quot;type&quot;: &quot;array&quot;,&#10;      &quot;items&quot;: { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/meta/joint.meta.json&quot; },&#10;      &quot;description&quot;: &quot;List of all joint metadata objects composing the skeleton.&quot;&#10;    },&#10;    &quot;bones&quot;: {&#10;      &quot;type&quot;: &quot;array&quot;,&#10;      &quot;items&quot;: { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/meta/bone.meta.json&quot; },&#10;      &quot;description&quot;: &quot;List of all bone metadata objects connecting the joints.&quot;&#10;    },&#10;    &quot;chains&quot;: {&#10;      &quot;type&quot;: &quot;array&quot;,&#10;      &quot;items&quot;: { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/type/chain.json&quot; },&#10;      &quot;description&quot;: &quot;Optional ordered chains of joints defining specific kinematic paths (e.g., fingers, spine).&quot;&#10;    },&#10;    &quot;metadata&quot;: {&#10;      &quot;type&quot;: &quot;object&quot;,&#10;      &quot;description&quot;: &quot;Optional additional metadata, such as tracking source, calibration parameters, device model, or versioning.&quot;,&#10;      &quot;properties&quot;: {&#10;        &quot;source&quot;: {&#10;          &quot;type&quot;: &quot;string&quot;,&#10;          &quot;description&quot;: &quot;Name or identifier of the device or tracking system that defined this skeleton (e.g., 'OpenXR', 'OptiTrack').&quot;&#10;        },&#10;        &quot;version&quot;: {&#10;          &quot;type&quot;: &quot;string&quot;,&#10;          &quot;description&quot;: &quot;Version string identifying the rig or calibration used.&quot;&#10;        }&#10;      },&#10;      &quot;additionalProperties&quot;: true&#10;    },&#10;    &quot;extensions&quot;: {&#10;      &quot;type&quot;: &quot;object&quot;,&#10;      &quot;description&quot;: &quot;Custom extension fields for future compatibility.&quot;,&#10;      &quot;additionalProperties&quot;: true&#10;    }&#10;  },&#10;&#10;  &quot;required&quot;: [&quot;name&quot;, &quot;region&quot;, &quot;rootJoint&quot;, &quot;joints&quot;, &quot;bones&quot;],&#10;  &quot;additionalProperties&quot;: false&#10;}&#10;" />
              <option name="updatedContent" value="{&#13;&#10;  &quot;$schema&quot;: &quot;https://json-schema.org/draft/2020-12/schema&quot;,&#13;&#10;  &quot;$id&quot;: &quot;https://mind-schema.org/schema/metas/skeleton.meta.json&quot;,&#13;&#10;  &quot;$comment&quot;: &quot;MIND harmonised 2025-10 — static metadata describing the structure and topology of a skeleton.&quot;,&#13;&#10;  &quot;title&quot;: &quot;skeletonMeta&quot;,&#13;&#10;  &quot;description&quot;: &quot;Static metadata describing the anatomical or virtual skeleton of a tracked body or model, including all bones, joints, and their hierarchical relationships.&quot;,&#13;&#10;&#13;&#10;  &quot;type&quot;: &quot;object&quot;,&#13;&#10;  &quot;properties&quot;: {&#13;&#10;    &quot;name&quot;: {&#13;&#10;      &quot;type&quot;: &quot;string&quot;,&#13;&#10;      &quot;description&quot;: &quot;Canonical name or identifier of the skeleton (e.g., 'HumanBody', 'LeftHand', 'XRHand').&quot;&#13;&#10;    },&#13;&#10;    &quot;region&quot;: {&#13;&#10;      &quot;$ref&quot;: &quot;https://mind-schema.org/schema/enums/body.region.enum.json&quot;,&#13;&#10;      &quot;description&quot;: &quot;Overall anatomical region represented by this skeleton (e.g., 'hand', 'body').&quot;&#13;&#10;    },&#13;&#10;    &quot;side&quot;: {&#13;&#10;      &quot;$ref&quot;: &quot;https://mind-schema.org/schema/enums/body.side.enum.json&quot;,&#13;&#10;      &quot;description&quot;: &quot;Optional anatomical side represented by this skeleton: 'left', 'right', or 'centre'.&quot;&#13;&#10;    },&#13;&#10;    &quot;rootJoint&quot;: {&#13;&#10;      &quot;$ref&quot;: &quot;https://mind-schema.org/schema/metas/joint.meta.json&quot;,&#13;&#10;      &quot;description&quot;: &quot;The root joint of the skeleton hierarchy.&quot;&#13;&#10;    },&#13;&#10;    &quot;joints&quot;: {&#13;&#10;      &quot;type&quot;: &quot;array&quot;,&#13;&#10;      &quot;items&quot;: { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/metas/joint.meta.json&quot; },&#13;&#10;      &quot;description&quot;: &quot;List of all joint metadata objects composing the skeleton.&quot;&#13;&#10;    },&#13;&#10;    &quot;bones&quot;: {&#13;&#10;      &quot;type&quot;: &quot;array&quot;,&#13;&#10;      &quot;items&quot;: { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/metas/bone.meta.json&quot; },&#13;&#10;      &quot;description&quot;: &quot;List of all bone metadata objects connecting the joints.&quot;&#13;&#10;    },&#13;&#10;    &quot;chains&quot;: {&#13;&#10;      &quot;type&quot;: &quot;array&quot;,&#13;&#10;      &quot;items&quot;: { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/types/chain.json&quot; },&#13;&#10;      &quot;description&quot;: &quot;Optional ordered chains of joints defining specific kinematic paths (e.g., fingers, spine).&quot;&#13;&#10;    },&#13;&#10;    &quot;metadata&quot;: {&#13;&#10;      &quot;type&quot;: &quot;object&quot;,&#13;&#10;      &quot;description&quot;: &quot;Optional additional metadata, such as tracking source, calibration parameters, device model, or versioning.&quot;,&#13;&#10;      &quot;properties&quot;: {&#13;&#10;        &quot;source&quot;: {&#13;&#10;          &quot;type&quot;: &quot;string&quot;,&#13;&#10;          &quot;description&quot;: &quot;Name or identifier of the device or tracking system that defined this skeleton (e.g., 'OpenXR', 'OptiTrack').&quot;&#13;&#10;        },&#13;&#10;        &quot;version&quot;: {&#13;&#10;          &quot;type&quot;: &quot;string&quot;,&#13;&#10;          &quot;description&quot;: &quot;Version string identifying the rig or calibration used.&quot;&#13;&#10;        }&#13;&#10;      },&#13;&#10;      &quot;additionalProperties&quot;: true&#13;&#10;    },&#13;&#10;    &quot;extensions&quot;: {&#13;&#10;      &quot;type&quot;: &quot;object&quot;,&#13;&#10;      &quot;description&quot;: &quot;Custom extension fields for future compatibility.&quot;,&#13;&#10;      &quot;additionalProperties&quot;: true&#13;&#10;    }&#13;&#10;  },&#13;&#10;&#13;&#10;  &quot;required&quot;: [&quot;name&quot;, &quot;region&quot;, &quot;rootJoint&quot;, &quot;joints&quot;, &quot;bones&quot;],&#13;&#10;  &quot;additionalProperties&quot;: false&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/schema/meta/software.meta.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/schema/meta/software.meta.json" />
              <option name="originalContent" value="{&#10;  &quot;$schema&quot;: &quot;https://json-schema.org/draft/2020-12/schema&quot;,&#10;  &quot;$id&quot;: &quot;https://mind-schema.org/schema/meta/software.meta.json&quot;,&#10;  &quot;title&quot;: &quot;softwareMeta&quot;,&#10;  &quot;description&quot;: &quot;Metadata for standardized software, referencing software.def.json.&quot;,&#10;  &quot;type&quot;: &quot;object&quot;,&#10;  &quot;properties&quot;: {&#10;    &quot;definition&quot;: { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/type/software.json&quot; },&#10;    &quot;context&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;Context or scenario for the software.&quot; },&#10;    &quot;tags&quot;: { &quot;type&quot;: &quot;array&quot;, &quot;items&quot;: { &quot;type&quot;: &quot;string&quot; }, &quot;description&quot;: &quot;Optional tags for classification.&quot; },&#10;    &quot;extensions&quot;: { &quot;type&quot;: &quot;object&quot;, &quot;description&quot;: &quot;Custom extension fields for future compatibility.&quot;, &quot;additionalProperties&quot;: true }&#10;  },&#10;  &quot;required&quot;: [&quot;definition&quot;],&#10;  &quot;additionalProperties&quot;: false&#10;}&#10;{&#10;  &quot;$schema&quot;: &quot;https://json-schema.org/draft/2020-12/schema&quot;,&#10;  &quot;$id&quot;: &quot;https://mind-schema.org/schema/meta/event.meta.json&quot;,&#10;  &quot;title&quot;: &quot;eventMeta&quot;,&#10;  &quot;description&quot;: &quot;Metadata for a standardized event, referencing event.def.json.&quot;,&#10;  &quot;type&quot;: &quot;object&quot;,&#10;  &quot;properties&quot;: {&#10;    &quot;definition&quot;: { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/def/event.def.json&quot; },&#10;    &quot;context&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;Context or scenario for the event.&quot; },&#10;    &quot;tags&quot;: { &quot;type&quot;: &quot;array&quot;, &quot;items&quot;: { &quot;type&quot;: &quot;string&quot; }, &quot;description&quot;: &quot;Optional tags for classification.&quot; },&#10;    &quot;extensions&quot;: { &quot;type&quot;: &quot;object&quot;, &quot;description&quot;: &quot;Custom extension fields for future compatibility.&quot;, &quot;additionalProperties&quot;: true }&#10;  },&#10;  &quot;required&quot;: [&quot;definition&quot;],&#10;  &quot;additionalProperties&quot;: false&#10;}&#10;" />
              <option name="updatedContent" value="{&#13;&#10;  &quot;$schema&quot;: &quot;https://json-schema.org/draft/2020-12/schema&quot;,&#13;&#10;  &quot;$id&quot;: &quot;https://mind-schema.org/schema/metas/software.meta.json&quot;,&#13;&#10;  &quot;title&quot;: &quot;softwareMeta&quot;,&#13;&#10;  &quot;description&quot;: &quot;Metadata for standardized software, referencing canonical software type.&quot;,&#13;&#10;  &quot;type&quot;: &quot;object&quot;,&#13;&#10;  &quot;properties&quot;: {&#13;&#10;    &quot;definition&quot;: { &quot;$ref&quot;: &quot;https://mind-schema.org/schema/types/software.json&quot; },&#13;&#10;    &quot;context&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;Context or scenario for the software.&quot; },&#13;&#10;    &quot;tags&quot;: { &quot;type&quot;: &quot;array&quot;, &quot;items&quot;: { &quot;type&quot;: &quot;string&quot; }, &quot;description&quot;: &quot;Optional tags for classification.&quot; },&#13;&#10;    &quot;extensions&quot;: { &quot;type&quot;: &quot;object&quot;, &quot;description&quot;: &quot;Custom extension fields for future compatibility.&quot;, &quot;additionalProperties&quot;: true }&#13;&#10;  },&#13;&#10;  &quot;required&quot;: [&quot;definition&quot;],&#13;&#10;  &quot;additionalProperties&quot;: false&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/schema/meta/trackedObject.meta.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/schema/meta/trackedObject.meta.json" />
              <option name="originalContent" value="{&#10;  &quot;$schema&quot;: &quot;https://json-schema.org/draft/2020-12/schema&quot;,&#10;  &quot;$id&quot;: &quot;https://mind-schema.org/schema/meta/trackedObject.meta.json&quot;,&#10;  &quot;$comment&quot;: &quot;MIND harmonised 2025-10 — root metadata schema linking tracked objects to their type-specific metadata definitions&quot;,&#10;  &quot;title&quot;: &quot;trackedObject&quot;,&#10;  &quot;description&quot;: &quot;Static metadata describing a tracked object, including its unique ID, type, label, hierarchy, and a link to type-specific metadata (e.g. bone, interactive).&quot;,&#10;  &quot;type&quot;: &quot;object&quot;,&#10;  &quot;required&quot;: [&quot;objectId&quot;, &quot;type&quot;],&#10;  &quot;properties&quot;: {&#10;    &quot;objectId&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;format&quot;: &quot;uuid&quot;,&#10;      &quot;description&quot;: &quot;Globally unique identifier for this tracked object.&quot;&#10;    },&#10;    &quot;label&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;description&quot;: &quot;Optional human-readable label for this object.&quot;&#10;    },&#10;    &quot;type&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;description&quot;: &quot;Categorical type of this tracked object (e.g. 'bone', 'interactive').&quot;&#10;    },&#10;    &quot;parentObjectId&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;description&quot;: &quot;Optional UUID of a parent trackedObject if this object is part of a hierarchy.&quot;&#10;    },&#10;    &quot;metadata&quot;: {&#10;      &quot;type&quot;: &quot;object&quot;,&#10;      &quot;description&quot;: &quot;Type-specific metadata associated with this object.&quot;,&#10;      &quot;additionalProperties&quot;: false&#10;    },&#10;    &quot;extensions&quot;: {&#10;      &quot;type&quot;: &quot;object&quot;,&#10;      &quot;description&quot;: &quot;Custom extension fields for future compatibility.&quot;,&#10;      &quot;additionalProperties&quot;: true&#10;    }&#10;  },&#10;  &quot;allOf&quot;: [&#10;    {&#10;      &quot;if&quot;: { &quot;properties&quot;: { &quot;type&quot;: { &quot;const&quot;: &quot;bone&quot; } } },&#10;      &quot;then&quot;: {&#10;        &quot;properties&quot;: {&#10;          &quot;metadata&quot;: {&#10;            &quot;$ref&quot;: &quot;https://mind-schema.org/schema/meta/bone.meta.json&quot;&#10;          }&#10;        }&#10;      }&#10;    },&#10;    {&#10;      &quot;if&quot;: { &quot;properties&quot;: { &quot;type&quot;: { &quot;const&quot;: &quot;interactive&quot; } } },&#10;      &quot;then&quot;: {&#10;        &quot;properties&quot;: {&#10;          &quot;metadata&quot;: {&#10;            &quot;$ref&quot;: &quot;https://mind-schema.org/schema/meta/interactive.meta.json&quot;&#10;          }&#10;        }&#10;      }&#10;    }&#10;  ],&#10;  &quot;additionalProperties&quot;: false&#10;}&#10;" />
              <option name="updatedContent" value="{&#13;&#10;  &quot;$schema&quot;: &quot;https://json-schema.org/draft/2020-12/schema&quot;,&#13;&#10;  &quot;$id&quot;: &quot;https://mind-schema.org/schema/metas/trackedObject.meta.json&quot;,&#13;&#10;  &quot;$comment&quot;: &quot;MIND harmonised 2025-10 — root metadata schema linking tracked objects to their type-specific metadata definitions&quot;,&#13;&#10;  &quot;title&quot;: &quot;trackedObject&quot;,&#13;&#10;  &quot;description&quot;: &quot;Static metadata describing a tracked object, including its unique ID, type, label, hierarchy, and a link to type-specific metadata (e.g. bone, interactive).&quot;,&#13;&#10;  &quot;type&quot;: &quot;object&quot;,&#13;&#10;  &quot;required&quot;: [&quot;objectId&quot;, &quot;type&quot;],&#13;&#10;  &quot;properties&quot;: {&#13;&#10;    &quot;objectId&quot;: {&#13;&#10;      &quot;type&quot;: &quot;string&quot;,&#13;&#10;      &quot;format&quot;: &quot;uuid&quot;,&#13;&#10;      &quot;description&quot;: &quot;Globally unique identifier for this tracked object.&quot;&#13;&#10;    },&#13;&#10;    &quot;label&quot;: {&#13;&#10;      &quot;type&quot;: &quot;string&quot;,&#13;&#10;      &quot;description&quot;: &quot;Optional human-readable label for this object.&quot;&#13;&#10;    },&#13;&#10;    &quot;type&quot;: {&#13;&#10;      &quot;type&quot;: &quot;string&quot;,&#13;&#10;      &quot;description&quot;: &quot;Categorical type of this tracked object (e.g. 'bone', 'interactive').&quot;&#13;&#10;    },&#13;&#10;    &quot;parentObjectId&quot;: {&#13;&#10;      &quot;type&quot;: &quot;string&quot;,&#13;&#10;      &quot;description&quot;: &quot;Optional UUID of a parent trackedObject if this object is part of a hierarchy.&quot;&#13;&#10;    },&#13;&#10;    &quot;metadata&quot;: {&#13;&#10;      &quot;type&quot;: &quot;object&quot;,&#13;&#10;      &quot;description&quot;: &quot;Type-specific metadata associated with this object.&quot;,&#13;&#10;      &quot;additionalProperties&quot;: false&#13;&#10;    },&#13;&#10;    &quot;extensions&quot;: {&#13;&#10;      &quot;type&quot;: &quot;object&quot;,&#13;&#10;      &quot;description&quot;: &quot;Custom extension fields for future compatibility.&quot;,&#13;&#10;      &quot;additionalProperties&quot;: true&#13;&#10;    }&#13;&#10;  },&#13;&#10;  &quot;allOf&quot;: [&#13;&#10;    {&#13;&#10;      &quot;if&quot;: { &quot;properties&quot;: { &quot;type&quot;: { &quot;const&quot;: &quot;bone&quot; } } },&#13;&#10;      &quot;then&quot;: {&#13;&#10;        &quot;properties&quot;: {&#13;&#10;          &quot;metadata&quot;: {&#13;&#10;            &quot;$ref&quot;: &quot;https://mind-schema.org/schema/metas/bone.meta.json&quot;&#13;&#10;          }&#13;&#10;        }&#13;&#10;      }&#13;&#10;    },&#13;&#10;    {&#13;&#10;      &quot;if&quot;: { &quot;properties&quot;: { &quot;type&quot;: { &quot;const&quot;: &quot;interactive&quot; } } },&#13;&#10;      &quot;then&quot;: {&#13;&#10;        &quot;properties&quot;: {&#13;&#10;          &quot;metadata&quot;: {&#13;&#10;            &quot;$ref&quot;: &quot;https://mind-schema.org/schema/metas/interactive.meta.json&quot;&#13;&#10;          }&#13;&#10;        }&#13;&#10;      }&#13;&#10;    }&#13;&#10;  ],&#13;&#10;  &quot;additionalProperties&quot;: false&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>